using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Windows.Forms;
using System.ComponentModel;
using Backman.Services.Services;

namespace Backman.Services
{
    class NotificationServiceFactory : Component, IChannelFactory<INotificationService>
    {
        private DuplexChannelFactory<INotificationService> innerFactory;

        static NotificationServiceFactory()
        {
            Injector.Infer<Backman.Services.Services.INotificationCallback>(new Backman.Services.Services.Impl.NotificationCallback());
        }

        public NotificationServiceFactory()
            : this(Injector.Get<Backman.Services.Services.INotificationCallback>())
        {
        }

        public NotificationServiceFactory(IContainer container) : this()
        {
            if (container != null)
            {
                container.Add(this);
            }
        }

        public NotificationServiceFactory(Backman.Services.Services.INotificationCallback callbackObject)
        {
            if (this.DesignMode) return;

            this.innerFactory = new DuplexChannelFactory<INotificationService>(callbackObject, "NotificationService");
            this.innerFactory.Closed += (sender, e) => this.Closed(this, e);
            this.innerFactory.Closing += (sender, e) => this.Closing(this, e);
            this.innerFactory.Faulted += (sender, e) => this.Faulted(this, e);
            this.innerFactory.Opened += (sender, e) => this.Opened(this, e);
            this.innerFactory.Opening += (sender, e) => this.Opening(this, e);
            this.CallbackObject = callbackObject;
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public Services.INotificationCallback CallbackObject { get; private set; }

        public INotificationService CreateChannel(EndpointAddress to, Uri via)
        {
            return this.innerFactory.CreateChannel(to, via);
        }

        public INotificationService CreateChannel(EndpointAddress to)
        {
            return this.innerFactory.CreateChannel(to);
        }

        public T GetProperty<T>() where T : class
        {
            return this.innerFactory.GetProperty<T>();
        }

        public void Abort()
        {
            this.innerFactory.Abort();
        }

        public IAsyncResult BeginClose(TimeSpan timeout, AsyncCallback callback, object state)
        {
            return this.innerFactory.BeginClose(timeout, callback, state);
        }

        public IAsyncResult BeginClose(AsyncCallback callback, object state)
        {
            return this.innerFactory.BeginClose(callback, state);
        }

        public IAsyncResult BeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
        {
            return this.innerFactory.BeginOpen(timeout, callback, state);
        }

        public IAsyncResult BeginOpen(AsyncCallback callback, object state)
        {
            return this.innerFactory.BeginOpen(callback, state);
        }

        public void Close(TimeSpan timeout)
        {
            this.innerFactory.Close(timeout);
        }

        public void Close()
        {
            this.innerFactory.Close();
        }

        public event EventHandler Closed;

        public event EventHandler Closing;

        public void EndClose(IAsyncResult result)
        {
            this.innerFactory.EndClose(result);
        }

        public void EndOpen(IAsyncResult result)
        {
            this.innerFactory.EndOpen(result);
        }

        public event EventHandler Faulted;

        public void Open(TimeSpan timeout)
        {
            this.innerFactory.Open(timeout);
        }

        public void Open()
        {
            this.innerFactory.Open();
        }

        public event EventHandler Opened;

        public event EventHandler Opening;

        public CommunicationState State
        {
            get { return this.innerFactory.State; }
        }
    }
}
